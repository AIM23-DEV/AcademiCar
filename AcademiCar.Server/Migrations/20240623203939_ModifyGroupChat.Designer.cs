// <auto-generated />
using System;
using AcademiCar.Server.DAL.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademiCar.Server.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20240623203939_ModifyGroupChat")]
    partial class ModifyGroupChat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ZIP")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Address", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Balance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("FK_User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Balance", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Carlos", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ImageSrc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Carlos", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.FavoriteUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FK_FavUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FK_UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_FavUserId");

                    b.HasIndex("FK_UserId");

                    b.ToTable("FavoriteUser", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.GroupChat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_Trip")
                        .HasColumnType("integer");

                    b.Property<string>("LastMessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TripTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.ToTable("GroupChat", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.GroupChatUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_GroupChat")
                        .HasColumnType("integer");

                    b.Property<string>("FK_User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_GroupChat");

                    b.HasIndex("FK_User");

                    b.ToTable("GroupChatUser", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.GroupMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("FK_GroupChat")
                        .HasColumnType("integer");

                    b.Property<string>("FK_SenderUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("FK_GroupChat");

                    b.HasIndex("FK_SenderUser");

                    b.ToTable("GroupMessage", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.InterestPreference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_Preferences")
                        .HasColumnType("integer");

                    b.Property<string>("Interest")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_Preferences");

                    b.ToTable("InterestPreference", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.MusicPreference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_Preferences")
                        .HasColumnType("integer");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_Preferences");

                    b.ToTable("MusicPreference", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.PersonalChat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FK_DriverUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FK_PassengerUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_Trip")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("FK_DriverUser");

                    b.HasIndex("FK_PassengerUser");

                    b.HasIndex("FK_Trip");

                    b.ToTable("PersonalChat", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.PersonalMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("FK_PersonalChat")
                        .HasColumnType("integer");

                    b.Property<string>("FK_SenderUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("FK_PersonalChat");

                    b.HasIndex("FK_SenderUser");

                    b.ToTable("PersonalMessage", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Preferences", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FK_User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_User");

                    b.ToTable("Preferences", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FK_RatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FK_RatingUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDriver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPassenger")
                        .HasColumnType("boolean");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FK_RatedUser");

                    b.HasIndex("FK_RatingUser");

                    b.ToTable("Rating", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Stats", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<float>("CO2Savings")
                        .HasColumnType("real");

                    b.Property<int>("DriverKilometres")
                        .HasColumnType("integer");

                    b.Property<int>("NrTrips")
                        .HasColumnType("integer");

                    b.Property<int>("PassengerKilometres")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Stats", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("FK_User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionSource")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Transaction", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TravelPreference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_Preferences")
                        .HasColumnType("integer");

                    b.Property<string>("IconType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreferenceText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_Preferences");

                    b.ToTable("TravelPreference", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Trip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FK_Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_EndAddress")
                        .HasColumnType("integer");

                    b.Property<int>("FK_StartAddress")
                        .HasColumnType("integer");

                    b.Property<int>("FK_Vehicle")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Trip", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TripPassenger", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FK_PassengerUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_Trip")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FK_PassengerUser");

                    b.HasIndex("FK_Trip");

                    b.ToTable("TripPassenger", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TripRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FK_PotentialPassenger")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_Trip")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TripRequest", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TripStop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_StopAddress")
                        .HasColumnType("integer");

                    b.Property<int>("FK_Trip")
                        .HasColumnType("integer");

                    b.Property<float>("StopDurationInMinutes")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("FK_StopAddress");

                    b.HasIndex("FK_Trip");

                    b.ToTable("TripStop", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("FK_Address")
                        .HasColumnType("integer");

                    b.Property<int>("FK_Stats")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PictureSrc")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Address");

                    b.HasIndex("FK_Stats");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Vehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("BrandModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FK_OwnerUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FuelConsumption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasAC")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasAnimalSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasAutomatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBikeRack")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCruiseControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasHandLuggageSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLeather")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLed")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMountingOnRoof")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOtherSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPlantSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSeatHeating")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSkiBag")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSkiSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSuitcaseSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasVehicleInspection")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureSrc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_OwnerUser");

                    b.ToTable("Vehicle", "academicar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.FavoriteUser", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "FavUser")
                        .WithMany()
                        .HasForeignKey("FK_FavUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.GroupChatUser", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.GroupChat", "GroupChat")
                        .WithMany()
                        .HasForeignKey("FK_GroupChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("FK_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.GroupMessage", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.GroupChat", "GroupChat")
                        .WithMany()
                        .HasForeignKey("FK_GroupChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("FK_SenderUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.InterestPreference", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.Preferences", "Preferences")
                        .WithMany()
                        .HasForeignKey("FK_Preferences")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.MusicPreference", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.Preferences", "Preferences")
                        .WithMany()
                        .HasForeignKey("FK_Preferences")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.PersonalChat", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "DriverUser")
                        .WithMany()
                        .HasForeignKey("FK_DriverUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "PassengerUser")
                        .WithMany()
                        .HasForeignKey("FK_PassengerUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("FK_Trip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverUser");

                    b.Navigation("PassengerUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.PersonalMessage", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.PersonalChat", "PersonalChat")
                        .WithMany()
                        .HasForeignKey("FK_PersonalChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("FK_SenderUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalChat");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Preferences", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("FK_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Rating", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "RatedUser")
                        .WithMany()
                        .HasForeignKey("FK_RatedUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "RatingUser")
                        .WithMany()
                        .HasForeignKey("FK_RatingUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatedUser");

                    b.Navigation("RatingUser");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TravelPreference", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.Preferences", "Preferences")
                        .WithMany()
                        .HasForeignKey("FK_Preferences")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TripPassenger", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "PassengerUser")
                        .WithMany()
                        .HasForeignKey("FK_PassengerUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("FK_Trip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassengerUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TripStop", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.Address", "StopAddress")
                        .WithMany()
                        .HasForeignKey("FK_StopAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("FK_Trip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StopAddress");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.User", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("FK_Address")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("FK_Stats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Vehicle", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("FK_OwnerUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
