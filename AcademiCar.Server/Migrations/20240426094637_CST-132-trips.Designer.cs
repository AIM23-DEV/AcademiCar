// <auto-generated />
using System;
using AcademiCar.Server.DAL.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademiCar.Server.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20240426094637_CST-132-trips")]
    partial class CST132trips
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ZIP")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Adress", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.FavoriteUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FavUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteUser", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Preferences", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_User")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FK_User");

                    b.ToTable("Preferences", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("FK_User")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDriver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPassenger")
                        .HasColumnType("boolean");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FK_User");

                    b.ToTable("Rating", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Stats", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<float>("CO2Savings")
                        .HasColumnType("real");

                    b.Property<int>("DriverRating")
                        .HasColumnType("integer");

                    b.Property<int>("NrTrips")
                        .HasColumnType("integer");

                    b.Property<float>("PassengerRating")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Stats", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TestTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Test_table", "test_schema");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Trip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<decimal>("Duration")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FK_Driver")
                        .HasColumnType("integer");

                    b.Property<int>("FK_EndAddress")
                        .HasColumnType("integer");

                    b.Property<int>("FK_StartAddress")
                        .HasColumnType("integer");

                    b.Property<int>("FK_Vehicle")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_Driver");

                    b.HasIndex("FK_EndAddress");

                    b.HasIndex("FK_StartAddress");

                    b.HasIndex("FK_Vehicle");

                    b.ToTable("Trip", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TripRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_PotentialPassenger")
                        .HasColumnType("integer");

                    b.Property<int>("FK_Trip")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_PotentialPassenger");

                    b.HasIndex("FK_Trip");

                    b.ToTable("TripRequest", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_Stats")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int?>("TripID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FK_Stats");

                    b.HasIndex("TripID");

                    b.ToTable("User", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Vehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FK_User")
                        .HasColumnType("integer");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsElectric")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FK_User");

                    b.ToTable("Vehicle", "academicar");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.FavoriteUser", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "User")
                        .WithMany("Favorits")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "FavUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Preferences", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("FK_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Rating", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("FK_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Trip", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("FK_Driver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Address", "EndAddress")
                        .WithMany()
                        .HasForeignKey("FK_EndAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Address", "StartAddress")
                        .WithMany()
                        .HasForeignKey("FK_StartAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("FK_Vehicle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("EndAddress");

                    b.Navigation("StartAddress");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.TripRequest", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "PotentialPassenger")
                        .WithMany()
                        .HasForeignKey("FK_PotentialPassenger")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("FK_Trip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PotentialPassenger");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.User", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("FK_Stats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademiCar.Server.DAL.Entities.Trip", null)
                        .WithMany("Passengers")
                        .HasForeignKey("TripID");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Vehicle", b =>
                {
                    b.HasOne("AcademiCar.Server.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("FK_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.Trip", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("AcademiCar.Server.DAL.Entities.User", b =>
                {
                    b.Navigation("Favorits");
                });
#pragma warning restore 612, 618
        }
    }
}
